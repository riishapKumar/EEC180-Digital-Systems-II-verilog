/*
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module add3_error(

	input [2:0] A,B,
	input cin,
	output reg [3:0] SUM
	
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

  wire CARRY0;
  assign CARRY0 = 1'b0;



//=======================================================
//  Structural coding
//=======================================================
	always@(*)
		begin
			if(A==7 & B== 4 | a==A & B==7)
				SUM = A+B+cin+1;
			else
				// Four full adders are combined together into one 3-bit ripple adder
  				full_adder op1 (A[0], B[0], CARRY0, SUM[0], CARRY1);
  				full_adder op2 (A[1], B[1], CARRY1, SUM[1], CARRY2);
  				full_adder op3 (A[2], B[2], CARRY2, SUM[2], SUM[3]);
		end
		
endmodule

// A full adder module that will be used in this 3-bit adder implementation
module full_adder
(
  input A,
  input B,
  input CARRY_IN,
  output SUM,
  output CARRY_OUT
);

  // This uses two exclusive OR (XOR) gates to SUM three inputs
  assign SUM = (A ^ B) ^ CARRY_IN;

  // This uses three OR gates to detect a CARRY_OUT from three inputs
  assign CARRY_OUT = (A & ~B & CARRY_IN) | (~A & B & CARRY_IN) | (A & B);
endmodule

*/

module add3_error
(
	input [2:0] a,b,
	input cin,
	output reg [3:0] sum
);

always@(*)
	begin
		if(a==7 & b== 4 | a==4 & b==7)
			sum=a+b+cin+1;
		else
			sum= a+b+cin;
end

endmodule



